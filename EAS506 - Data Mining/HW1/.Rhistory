)
input <- curData[,c('crim','lstat')]
plot(x = input$crim,
y = input$lstat,
xlab = "crime",
ylab = "lstat" ,
main = "crime to lstat"
)
}
showScatterPlot()
showScatterPlotPair <- function(){
pairs(Boston)
}
showScatterPlotPair()
# === Question 3 show high crime rate...etc ===
showBoxPlotsQ3 <- function(){
x11()
par(mfrow=c(3 , 1  ))
boxplot(curData$crim, horizontal = TRUE , main = "Crime Rates")
boxplot(curData$tax, horizontal = TRUE , main = "Tax Rates ")
boxplot(curData$ptratio, horizontal = TRUE , main = "PTRatio ")
}
# === Question 2 Find predictors with crime rate ===
crimeRateCorrelationQ2 <- function(){
x11()
ggcorr(curData, label = TRUE)
}
boxplot(curData$crim, horizontal = TRUE , main = "Crime Rates")
# ====================== Take a look at the data ======================
head( curData)
summary(curData)
# ===== Subsets of 7 and 8 rooms ======
nrow(subset(Boston, rm>7))
nrow(subset(Boston, rm>8))
# ====== show plots ========
showScatterPlotQ1()
# Find Correlation with predictors
crimeRateCorrelationQ2()
showBoxPlotsQ3()
#######################################################
# This code utilizes kNN for different values of k
#
# Matthew Sah
# UBITName : msah
# Last Edited : SEP / 16 / 2019
#
# Question
# Suppose  that you are getting this data in order to build a predictive model for nutritional rating.
# Using the full dataset,
# investigate the data using exploratory data analysis such as scatterplots,
# and other tools we have discussed in class.
# Pre-process this data (e.g. transformations,
# elimination of outliers) and justify your choicesin your write up.
# Submit the cleaned dataset as an *.RData file.
#######################################################
rm(list = ls())
setwd("C:/Users/Matthew/Documents/WorkFolder")
library(leaps);library(Ecdat);library(car);library(lmtest);library(psych);library(ggplot2);library("ElemStatLearn");library("ggplot2");library("GGally")
ls("package:ElemStatLearn")
require(lattice)
# ====================== Load data  ======================
curData  <- read.csv(file="cereal.csv", header=TRUE, sep=",")
# ====================== Take a look at the data ======================
head( curData)
summary(goodFits)
# ====================== Subsets of non outliers and non null data -> removal of outliers ======================
goodFits <- subset(curData , curData$rating <90 & curData$weight > 0 &  curData$potass != -1  &  curData$sugar != -1  &  curData$carbo != -1)
# ====================== Check valadity of chosen Data ======================
dim(goodFits)
head(goodFits)
head(goodFits)
# ====================== Find Correlations  ======================
par(mfrow = c(1,2), pty = "s") #pty = "s" is square plotting region
plot(log(protein) ~ log(weight), data = goodFits)
plot(rating ~ sugars, data = goodFits)
# TODO
abline(lm(goodFits$rating ~ goodFits$sugars))
x11()
ggcorr(goodFits, label = TRUE)
x11()
ggpairs(goodFits, columns=c("fiber", "protein", "potass"), upper = list(continuous = wrap("cor", size = 10)), lower = list(continuous = "smooth") )
# ====================== Find Correlations -> correlations of ratings and fibers just for reference  ======================
x11()
qplot(goodFits$rating, goodFits$fiber, alpha = I(1/5), se = FALSE, geom = c("point", "smooth"))
#qplot(goodFits$rating, goodFits$fiber, alpha = I(1/5), se = FALSE, geom = c("point", "smooth"), method = "lm")
# ====================== Find out that theres a differnce in level of manufacturer  ======================
x11()
stripplot(  rating ~ mfr, xlab = "Manufacturer", ylab = "Ratings", main = "Overview of manufacturers and ratings",
vertical=TRUE, data = goodFits, pch = 16)
# ====================== Functions  ======================
seeAllScatterPlots <- function(){
x11()
par(mfrow=c(3 , 3  ))
input <- goodFits[,c('calories','rating')]
plot(x = input$calories,
y = input$rating,
xlab = "Calories",
ylab = "rating" ,
main = "Calories to Ratings"
)
input <- goodFits[,c('protein','rating')]
plot(x = input$protein,
y = input$rating,
xlab = "Protein",
ylab = "rating" ,
main = "Protein to Ratings"
)
input <- goodFits[,c('fat','rating')]
plot(x = input$fat,
y = input$rating,
xlab = "Fat",
ylab = "rating" ,
main = "Fat to Ratings"
)
input <- goodFits[,c('sodium','rating')]
plot(x = input$sodium,
y = input$rating,
xlab = "Sodium",
ylab = "rating" ,
main = "Sodium to Ratings"
)
input <- goodFits[,c('sugars','rating')]
plot(x = input$sugars,
y = input$rating,
xlab = "Sugar",
ylab = "rating" ,
main = "Sugar to Ratings"
)
input <- goodFits[,c('fiber','rating')]
plot(x = input$fiber,
y = input$rating,
xlab = "Fiber",
ylab = "rating" ,
main = "Fiber to Ratings"
)
input <- goodFits[,c('carbo','rating')]
plot(x = input$carbo,
y = input$rating,
xlab = "Carbo",
ylab = "rating" ,
main = "Carbo to Ratings"
)
input <- goodFits[,c('potass','rating')]
plot(x = input$potass,
y = input$rating,
xlab = "potass",
ylab = "rating" ,
main = "Potass to Ratings"
)
input <- goodFits[,c('cups','rating')]
plot(x = input$cups,
y = input$rating,
xlab = "Cups",
ylab = "rating" ,
main = "Cups to Ratings"
)
}
seeAllBoxPlots <- function(){
x11()
par(mfrow=c(5 , 2  ))
boxplot(goodFits$rating, horizontal = TRUE , main = "Rating")
boxplot(goodFits$calories, horizontal = TRUE , main = "Calories ")
boxplot(goodFits$protein, horizontal = TRUE , main = "Protein ")
boxplot(goodFits$fat, horizontal = TRUE , main = "fat ")
boxplot(goodFits$sodium, horizontal = TRUE , main = "sodium ")
boxplot(goodFits$fiber, horizontal = TRUE , main = "Fiber ")
boxplot(goodFits$carbo, horizontal = TRUE , main = "carbo ")
boxplot(goodFits$sugars, horizontal = TRUE , main = "Sugars ")
boxplot(goodFits$potass, horizontal = TRUE , main = "potass ")
boxplot(goodFits$cups, horizontal = TRUE , main = "Cups")
}
# data has low variety
showNonsPlot <- function(){
x11()
par(mfrow=c(1 , 3  ))
input <- goodFits[,c('vitamins','rating')]
plot(x = input$vitamins,
y = input$rating,
xlab = "vitamin",
ylab = "rating" ,
main = "Vitamin to Ratings"
)
input <- goodFits[,c('weight','rating')]
plot(x = input$weight,
y = input$rating,
xlab = "weight",
ylab = "rating" ,
main = "Weight to Ratings"
)
input <- goodFits[,c('shelf','rating')]
plot(x = input$shelf,
y = input$rating,
xlab = "Shelf",
ylab = "rating" ,
main = "Shelf to Ratings"
)
}
showNonBoxPlot <- function(){
x11()
par(mfrow=c(3 , 1 ))
boxplot(goodFits$weight, horizontal = TRUE , main = "Weights ")
boxplot(goodFits$vitamin, horizontal = TRUE , main = "Vitamin ")
boxplot(goodFits$shelf, horizontal = TRUE , main = "Shelf ")
}
question2DSolveLM <- function(){
subsetFit = subset(goodFits)
fit = lm(rating ~ . -name -mfr - type -weight -shelf -cups,subsetFit)
summary(fit)
}
question2DSolveLM()
# ====================== Analysis Starts  ======================
# ====================== Normal Data plots =============================
seeAllScatterPlots()
seeAllBoxPlots()
# ====================== Possible invalid data plots =============================
showNonsPlot()
showNonBoxPlot()
# ====================== Archived Code ======================
# Scatter
# install.packages("DAAG")
# install.packages("lattice")
# install.packages("ggplot2")
# Analyze Data Information, medium mean min max of data
## mad = mean absolute difference
# describe(curData)
#remove null values
# na.rm = TRUE
# Stem and Leaf
## stem(goodFits$rating)
# Names
# "name""mfr""type""calories" "protein""fat""sodium""fiber""carbo""sugars""potass""vitamins" "shelf""weight""cups""rating"
## names( curData )
# Dimensions 77 * 16
## dim(curData)
# ================== Save RData ==================
saveRDS(goodFits , file = "goodFits.rds")
tester <- readRDS("goodFits.rds")
#write.csv(tester, file = "goodFits.csv")
#######################################################
# This code utilizes kNN for different values of k
#
# Matthew Sah
# UBITName : msah
# Last Edited : SEP / 16 / 2019
#
# Question
# Suppose  that you are getting this data in order to build a predictive model for nutritional rating.
# Using the full dataset,
# investigate the data using exploratory data analysis such as scatterplots,
# and other tools we have discussed in class.
# Pre-process this data (e.g. transformations,
# elimination of outliers) and justify your choicesin your write up.
# Submit the cleaned dataset as an *.RData file.
#######################################################
rm(list = ls())
setwd("C:/Users/Matthew/Documents/WorkFolder")
library(leaps);library(Ecdat);library(car);library(lmtest);library(psych);library(ggplot2);library("ElemStatLearn");library("ggplot2");library("GGally")
ls("package:ElemStatLearn")
require(lattice)
# ====================== Load data  ======================
curData  <- read.csv(file="cereal.csv", header=TRUE, sep=",")
# ====================== Take a look at the data ======================
head( curData)
summary(goodFits)
# ====================== Subsets of non outliers and non null data -> removal of outliers ======================
goodFits <- subset(curData , curData$rating <90 & curData$weight > 0 &  curData$potass != -1  &  curData$sugar != -1  &  curData$carbo != -1)
# ====================== Check valadity of chosen Data ======================
dim(goodFits)
head(goodFits)
head(goodFits)
# ====================== Find Correlations  ======================
par(mfrow = c(1,2), pty = "s") #pty = "s" is square plotting region
plot(log(protein) ~ log(weight), data = goodFits)
plot(rating ~ sugars, data = goodFits)
# TODO
abline(lm(goodFits$rating ~ goodFits$sugars))
x11()
ggcorr(goodFits, label = TRUE)
x11()
ggpairs(goodFits, columns=c("fiber", "protein", "potass"), upper = list(continuous = wrap("cor", size = 10)), lower = list(continuous = "smooth") )
# ====================== Find Correlations -> correlations of ratings and fibers just for reference  ======================
x11()
qplot(goodFits$rating, goodFits$fiber, alpha = I(1/5), se = FALSE, geom = c("point", "smooth"))
#qplot(goodFits$rating, goodFits$fiber, alpha = I(1/5), se = FALSE, geom = c("point", "smooth"), method = "lm")
# ====================== Find out that theres a differnce in level of manufacturer  ======================
x11()
stripplot(  rating ~ mfr, xlab = "Manufacturer", ylab = "Ratings", main = "Overview of manufacturers and ratings",
vertical=TRUE, data = goodFits, pch = 16)
# ====================== Functions  ======================
seeAllScatterPlots <- function(){
x11()
par(mfrow=c(3 , 3  ))
input <- goodFits[,c('calories','rating')]
plot(x = input$calories,
y = input$rating,
xlab = "Calories",
ylab = "rating" ,
main = "Calories to Ratings"
)
input <- goodFits[,c('protein','rating')]
plot(x = input$protein,
y = input$rating,
xlab = "Protein",
ylab = "rating" ,
main = "Protein to Ratings"
)
input <- goodFits[,c('fat','rating')]
plot(x = input$fat,
y = input$rating,
xlab = "Fat",
ylab = "rating" ,
main = "Fat to Ratings"
)
input <- goodFits[,c('sodium','rating')]
plot(x = input$sodium,
y = input$rating,
xlab = "Sodium",
ylab = "rating" ,
main = "Sodium to Ratings"
)
input <- goodFits[,c('sugars','rating')]
plot(x = input$sugars,
y = input$rating,
xlab = "Sugar",
ylab = "rating" ,
main = "Sugar to Ratings"
)
input <- goodFits[,c('fiber','rating')]
plot(x = input$fiber,
y = input$rating,
xlab = "Fiber",
ylab = "rating" ,
main = "Fiber to Ratings"
)
input <- goodFits[,c('carbo','rating')]
plot(x = input$carbo,
y = input$rating,
xlab = "Carbo",
ylab = "rating" ,
main = "Carbo to Ratings"
)
input <- goodFits[,c('potass','rating')]
plot(x = input$potass,
y = input$rating,
xlab = "potass",
ylab = "rating" ,
main = "Potass to Ratings"
)
input <- goodFits[,c('cups','rating')]
plot(x = input$cups,
y = input$rating,
xlab = "Cups",
ylab = "rating" ,
main = "Cups to Ratings"
)
}
seeAllBoxPlots <- function(){
x11()
par(mfrow=c(5 , 2  ))
boxplot(goodFits$rating, horizontal = TRUE , main = "Rating")
boxplot(goodFits$calories, horizontal = TRUE , main = "Calories ")
boxplot(goodFits$protein, horizontal = TRUE , main = "Protein ")
boxplot(goodFits$fat, horizontal = TRUE , main = "fat ")
boxplot(goodFits$sodium, horizontal = TRUE , main = "sodium ")
boxplot(goodFits$fiber, horizontal = TRUE , main = "Fiber ")
boxplot(goodFits$carbo, horizontal = TRUE , main = "carbo ")
boxplot(goodFits$sugars, horizontal = TRUE , main = "Sugars ")
boxplot(goodFits$potass, horizontal = TRUE , main = "potass ")
boxplot(goodFits$cups, horizontal = TRUE , main = "Cups")
}
# data has low variety
showNonsPlot <- function(){
x11()
par(mfrow=c(1 , 3  ))
input <- goodFits[,c('vitamins','rating')]
plot(x = input$vitamins,
y = input$rating,
xlab = "vitamin",
ylab = "rating" ,
main = "Vitamin to Ratings"
)
input <- goodFits[,c('weight','rating')]
plot(x = input$weight,
y = input$rating,
xlab = "weight",
ylab = "rating" ,
main = "Weight to Ratings"
)
input <- goodFits[,c('shelf','rating')]
plot(x = input$shelf,
y = input$rating,
xlab = "Shelf",
ylab = "rating" ,
main = "Shelf to Ratings"
)
}
showNonBoxPlot <- function(){
x11()
par(mfrow=c(3 , 1 ))
boxplot(goodFits$weight, horizontal = TRUE , main = "Weights ")
boxplot(goodFits$vitamin, horizontal = TRUE , main = "Vitamin ")
boxplot(goodFits$shelf, horizontal = TRUE , main = "Shelf ")
}
question2DSolveLM <- function(){
subsetFit = subset(goodFits)
fit = lm(rating ~ . -name -mfr - type -weight -shelf -cups,subsetFit)
summary(fit)
}
question2DSolveLM()
# ====================== Analysis Starts  ======================
# ====================== Normal Data plots =============================
seeAllScatterPlots()
seeAllBoxPlots()
# ====================== Possible invalid data plots =============================
showNonsPlot()
showNonBoxPlot()
# ====================== Archived Code ======================
# Scatter
# install.packages("DAAG")
# install.packages("lattice")
# install.packages("ggplot2")
# Analyze Data Information, medium mean min max of data
## mad = mean absolute difference
# describe(curData)
#remove null values
# na.rm = TRUE
# Stem and Leaf
## stem(goodFits$rating)
# Names
# "name""mfr""type""calories" "protein""fat""sodium""fiber""carbo""sugars""potass""vitamins" "shelf""weight""cups""rating"
## names( curData )
# Dimensions 77 * 16
## dim(curData)
# ================== Save RData ==================
saveRDS(goodFits , file = "goodFits.rds")
tester <- readRDS("goodFits.rds")
#write.csv(tester, file = "goodFits.csv")
graphics.off()
rm(list = ls())
setwd("C:/Users/Matthew/Documents/WorkFolder")
library(leaps);library(Ecdat);library(car);library(lmtest);library(psych);library(ggplot2);library("ElemStatLearn");library("ggplot2");library("GGally")
library(data.table)
library("MASS")
library(class)
library(reshape2)
library(ggplot2)
library(xtable)
# zipcode
ls("package:ElemStatLearn")
require(lattice)
# Training Variable
## Y
zip_trainY <- subset(zip.train, zip.train[,1]==2| zip.train[,1] ==3, select = 1)
head(zip_trainY)
dim(zip_trainY)
# zip_trainY <- subset( zip_trainY, zip_trainY[,1]== 2 | zip_trainY[,1] ==3)
# head(zip_trainY)
# dim(zip_trainY)
##X
zip_trainX <- subset( zip.train, zip.train[,1]==2| zip.train[,1] ==3, select = -1)
dim(zip_trainX)
# Test Variable
zip_testY <- subset( zip.test,  zip.test[,1]== 2 | zip.test[,1] ==3, select = 1)
head(zip_testY)
dim(zip_testY)
# zip_testY <- subset( zip_testY, zip_testY[,1]== 2 | zip_testY[,1] ==3)
# head(zip_testY)
# dim(zip_testY)
zip_testX <- subset( zip.test, zip.test[,1]==2| zip.test[,1] ==3, select = -1)
dim(zip_testX)
# old regression
# train_fit = lm(zip_trainX~zip_trainY)
# ==========Linear Regression ================
## Training
modelResults = lm(zip_trainY~ ., data.frame(zip_trainX))
modelResults
# Summary
# Redundant?
fmSum <-summary(modelResults$fitted.values)
fmSum
# Find Accuracy
# Training
model_prediction <- round(predict(modelResults, newdata=data.frame(zip_trainX)))
model_prediction
model_error <- mean(zip_trainX[,1] != model_prediction)
model_error
# Testing
model_prediction_test <- round(predict(modelResults, newdata=data.frame(zip_testX)))
model_error_test <- mean(zip_testX[,1] != model_prediction_test)
model_error_test
# ============ knn ==================
knnSizes = c(1,3,5,7,9,11,13,15)
zip_trainY <- subset(zip.train, zip.train[,1]==2| zip.train[,1] ==3, select = 1)
zip_trainX <- subset( zip.train, zip.train[,1]==2| zip.train[,1] ==3, select = -1)
# Train Datas
for( i in knnSizes){
knn_prediction_train = knn(zip_trainX, zip_trainX, zip_trainY , k =i)
correct_answers = which(zip_trainY== knn_prediction_train)
knn_error_training = 1-length(correct_answers)/length(zip_trainY)
print(i)
print(knn_error_training)
}
zip_testY <- subset( zip.test,  zip.test[,1]== 2 | zip.test[,1] ==3, select = 1)
zip_testX <- subset( zip.test, zip.test[,1]==2| zip.test[,1] ==3, select = -1)
# Test Datas
for( i in knnSizes){
knn_prediction_test = knn(zip_trainX, zip_testX, zip_trainY , k =i)
correct_answers = which(zip_testY== knn_prediction_test)
knn_error_test = 1-length(correct_answers)/length(zip_testY)
print(i)
print(knn_error_test )
}
